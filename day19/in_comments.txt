0:  addi 4 16 4 # Jump forward 16 lines to (17) (INIT)

  FUNC_A (factors?)
1:  seti 1 9 5  # [Land here in A after line 27 jump] reg[5] = 1

  LOOP5
2:  seti 1 5 2  # reg[2] = 1                              # reg[2] starts over but reg[5] doesn't (O(n^2))

  LOOP2
3:  mulr 5 2 1  # reg[1] = reg[5] * reg[2]                # reg[2], reg[5] are counter, reg[3] is last count
4:  eqrr 1 3 1  # reg[1] = reg[1] == reg[3]
5:  addr 1 4 4  # skip next line if so (ADD)
6:  addi 4 1 4  # jump forward 1 line to line 9(8)

  ADD
7:  addr 5 0 0  # reg[0] += reg[5]

8:  addi 2 1 2  # reg[2] += 1                       (2)
9:  gtrr 2 3 1  # reg[1] = reg[2] > reg[3]          
10: addr 4 1 4  # Skip next line if so
    seti 2 6 4  # Jump to (3) (LOOP2)
    addi 5 1 5  # reg[5] += 1
    gtrr 5 3 1  # reg[1] = reg[5] > reg[3]
    addr 1 4 4  # return if so
    seti 1 2 4  # jump to (2) (LOOP5)
    mulr 4 4 4  # return
   
  INIT  
17: addi 3 2 3  # reg[3] +=  2          (2)
    mulr 3 3 3  # reg[3] = reg[3] ^2    (4)
    mulr 4 3 3  # reg[3] *= 19          (..)
20: muli 3 11 3 # reg[3] *= 11          (836)
    addi 1 5 1  # reg[1] += 5           (5)       
    mulr 1 4 1  # reg[1] *= 22          (110)
    addi 1 2 1  # reg[1] += 2           (112)
    addr 3 1 3  # reg[3] += reg[1]      (948)
    addr 4 0 4  # jump ahead reg[0]
    seti 0 2 4  # [Land here in A] jump to (1) (FUNC_A)
    
  FUNC_B  
    setr 4 8 1  # [Land here in B] reg[1] = 27
    mulr 1 4 1  # reg[1] *= 28
    addr 4 1 1  # reg[1] += 29
30: mulr 4 1 1  # reg[1] *= 30
    muli 1 14 1 # reg[1] *= 14
    mulr 1 4 1  # reg[1] *= 32
    addr 3 1 3  # reg[3] += reg[1]
    seti 0 0 0  # reg[0] = 0
    seti 0 2 4  # jump to reg[0] (FUNC_A (10551348)) 
